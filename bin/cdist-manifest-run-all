#!/bin/sh
#
# 2010-2011 Nico Schottelius (nico-cdist at schottelius.org)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
# 
# For each created object
# run the manifest of the type (with object id),
# try to merge back newly created objects (otherwise fail),
# mark the object as being run
# and iterate until all objects are marked being run.
#
#
#

. cdist-config
[ $# -eq 2 ] || __cdist_usage "<target host> <object_base_dir>"
set -eu

__cdist_target_host="$1"; shift
__cdist_object_base_dir="$1"; shift

__cdist_objects_list="${__cdist_tmp_dir}/objects_file"
__cdist_new_objects_list="${__cdist_tmp_dir}/new_objects_file"
__cdist_new_objects_dir="${__cdist_tmp_dir}/new_objects_dir"


# Loop until we do not create new objects anymore
# which is equal to all objects have been run
__cdist_new_objects_created=y
while [ "$__cdist_new_objects_created" = "y"  ]; do
   # Assume we're done after this run
   __cdist_new_objects_created=n

   __cdist_object_list "$__cdist_object_base_dir" > "$__cdist_objects_list"

   # Check every object, if we need to run it
   while read __cdist_object; do
      # Full path to current object
      __cdist_cur_object_dir="$__cdist_object_base_dir/$__cdist_object"
      # Only the id
      __cdist_object_id="$(__cdist_object_id_from_object "$__cdist_object")"

      if [ ! -f "${__cdist_cur_object_dir}/$__cdist_name_object_finished" ]; then
         echo "Working on object ${__cdist_object} ..."

         __cdist_type="$(__cdist_type_from_object "$__cdist_object")"
         __cdist_manifest="$__cdist_type_dir/${__cdist_type}/${__cdist_name_manifest}"

         # Make __cdist_manifest available for cdist-type-emulator
         export __cdist_manifest

         if [ -x "${__cdist_manifest}" ]; then
            echo "Executing manifest ${__cdist_manifest} ..."

            # Make variables available to non-core
            set -x
            export $__cdist_name_var_object="$__cdist_cur_object_dir"
            export $__cdist_name_var_object_id="$__cdist_object_id"
            set +x

            cdist-manifest-run "$__cdist_target_host" "$__cdist_manifest" \
               "$__cdist_new_objects_dir" "$__cdist_object_id"

            __cdist_object_list "${__cdist_new_objects_dir}" > "$__cdist_new_objects_list"

            # Verify no conflicting objects have been created
            while read __cdist_new_object; do
               grep -q "^$__cdist_new_object\$" "$__cdist_objects_list" && \
                  __cdist_exit_err "${__cdist_manifest}: Tried to recreate ${__cdist_new_object}"
            done < "$__cdist_new_objects_list"

            # Safe harbour: We can merge all objects into main tree
            # Merge = mkdir + mv parameters and source information
            while read __cdist_new_object; do
                [ "$__cdist_new_objects_created" = "n" ] && __cdist_new_objects_created="y"
               
               # where to save the newly created object
               __cdist_object_dir="$__cdist_object_base_dir/$__cdist_new_object"

               # Source of the new object
               __cdist_new_object_dir="${__cdist_new_objects_dir}/$__cdist_new_object"

               mkdir -p "$__cdist_object_dir"

               # Move parameters and source information
               mv "${__cdist_new_object_dir}/"* "$__cdist_object_dir"
               mv "${__cdist_new_object_dir}/${__cdist_name_object_source}" "$__cdist_object_dir"
            done < "$__cdist_new_objects_list"

            # Remove listing and objects, otherwise the next type will reuse it...
            rm -rf "$__cdist_new_objects_dir" "$__cdist_new_objects_list"
         else
            # Be nice, warn user if manifests exists, but is not executable
            if [ -f "${__cdist_manifest}" ]; then
               echo "Warning ${__cdist_manifest} exists, but is not executable." >&2
            fi
         fi
      fi

      # done with this object
      touch "$__cdist_cur_object_dir/$__cdist_name_object_finished"
   done < "$__cdist_objects_list"
done
